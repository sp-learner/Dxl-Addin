function handleNetCalculations(){console.log("Calculating Values, NetRate, and NetValue..."),Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet(),a=t.getUsedRange();a.load("rowCount, columnCount, values"),await e.sync();const r=a.rowCount;for(let e=1;e<r;e++){const a=t.getCell(e,3),r=t.getCell(e,4),o=t.getCell(e,5);a.formulas=[[`=A${e+1}*B${e+1}`]],r.formulas=[[`=B${e+1}+(B${e+1}*C${e+1}/100)`]],o.formulas=[[`=A${e+1}*E${e+1}`]]}const o=r,l=r+1;t.getRange(`A${o+1}:F${o+1}`).values=[["","","","","",""]],t.getCell(l,0).formulas=[[`=SUM(A2:A${r})`]],t.getCell(l,3).formulas=[[`=SUM(D2:D${r})`]],t.getCell(l,5).formulas=[[`=SUM(F2:F${r})`]],t.getCell(l,1).formulas=[[`=D${l+1}/A${l+1}`]],t.getCell(l,4).formulas=[[`=F${l+1}/A${l+1}`]],t.getRange(`A${l+1}:F${l+1}`).format.fill.color="yellow",await e.sync(),console.log("All calculations, spacing, and styling applied successfully.")})).catch((e=>{console.error("Error in handleNetCalculations: ",e)}))}async function PutFormula(){console.log("Applying formulas..."),await Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet().getUsedRange();t.load("values"),await e.sync();let a=t.values;if(0===a.length||0===a[0].length)return void console.error("No data found.");let r=-1;for(let e=0;e<a.length;e++)if(a[e].some((e=>"string"==typeof e&&""!==e.trim()))){r=e;break}if(-1===r)return void console.error("No header row found.");let o=a[r].map((e=>e?e.toString().trim().toLowerCase():""));function l(e){return o.findIndex((t=>e.some((e=>t===e.toLowerCase()))))}const n=l(["Weight","TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."]),s=l(["Rate","BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"]),i=l(["Disc","%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"]);if(-1===n||-1===s||-1===i)return void console.error("Missing required columns (Weight, Rate, or Discount).");const c=l(["value","rapvalue","rapaport value","r.value","val","RapVlu"]),R=l(["net_rate","$ / Carat","$/Carat","$/CT","$/CTS","$/PC","Asking Price","askprice","BACK P/Ct","Base Rate","Cash Price","CashPrice","CRate","Ct/Price","D.RAP PRICE","DIS / CT","Final Rate","List$/Ct","Net Rate","NET_RATE","P.CARAT","P/CT","P/CTS","Per Crt $","Per ct","Per Ct $","PerCarat","PerCrt","PerCts","PPC","PPC$","Pr/Ct","PRAP($)","PRI/CRT","Price p.c","Price $/cts","Price / Crts","Price Per Carat","Price Per Crt","Price Per Ct","Price/Carat","Price/Crt","Price/Ct","Price/Ct ($)","Price/ct.","Price/Cts","Price/CTS $","Price/Cts USD","Price/Cts.","PRICE_DOLLAR","PRICE_PER_CARAT","Price_Per_Crt","PricePerCarat","Rap @","rap_prc","RapNet Price","RapNet Rate","RATE","Rate $/CT","Rate / CT","Rate ?","Rate per carat as per Rapnet","Rate($)","RATE($/CT)","Rate/Ct","RP Price","RTE","SaleRate","sales_price","Selling Price","User Price /Cts","VALLUE","WebsiteRate"]),u=l(["net_value","$ Total","amont","AMOUNT","Amount $","Amount ?","Amount US$","Amount($)","Amt","Amt $","Amt.","askamount","Asking Amount","Back Total","Base Amt","CAmount","DiscountPrice","EST AMT","F value","F.Amt","FINAL","Final Amount","Final Amt","Final Amt IN $","Final Price","Final Value","FINAL$","final_amount","FinalValue","mspTotal","Net","NET VALLUE","NET $","Net Amt","Net Amt($)","Net Value","NET_VALUE","NetAmt","Offer Value($)","Rap US $","Rapa Value","RapNet Amount","RapNet Price","RP Tot$","SaleAmt","saledollorprice","Stone Price","Stone($)","T AMT","T Price","T VALUE","T. AMOUNT","T.Amt","Tot. Value","Total","TOTAL $","Total $ as per Rapnet","Total ($)","TOTAL AMOUNT","Total Amt","Total Amt.","Total Price","Total$","total_price","TotalAmount","TotalPrice","TotalValue $","User Total $","VALUE_DOLLAR","WebsiteAmount"]),C=getColumnLetter(n),p=getColumnLetter(s),P=getColumnLetter(i),A=-1!==c?getColumnLetter(c):null,g=-1!==R?getColumnLetter(R):null,m=-1!==u?getColumnLetter(u):null;for(let e=r+1;e<a.length;e++){const t=e+1;A&&(a[e][c]=`=${C}${t}*${p}${t}`),g&&(a[e][R]=`=${p}${t}+((${p}${t}*${P}${t})/100)`),g&&m&&(a[e][u]=`=${C}${t}*${g}${t}`)}t.formulas=a,await e.sync(),console.log("Formulas applied successfully!")})).catch((e=>console.error("Error:",e)))}function getColumnLetter(e){if(e<0)return"";let t="",a=e;for(;a>=0;)t=String.fromCharCode(a%26+65)+t,a=Math.floor(a/26)-1;return t}async function createTable(){await Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet();t.load("name"),await e.sync();const a=(new Date).getTime(),r=`ExpensesTable_${t.name.replace(/\s+/g,"_")}_${a}`,o=t.tables.add("A1:N1",!0);o.name="ExpensesTable",o.name=r,o.getHeaderRowRange().values=[["Shp#","Color","Clarity ??","Cut","Polish","Symm","FLName","Lab","Weight","NEW RAP","Disc","value","net_rate","Amount $"]],o.rows.add(null,[["Round","E","VVS1","Good","Good","Good","None","G.I.A","0.25","5000","-25","","",""],["Ht","E","VVS2-","Ideal","Ideal","Ideal","Non","GIA","0.98","6000","-27","","",""],["EM","D","SI1","Ex","Ex","Ex","MEDIUM","HRD","0.6","5800","-31","","",""],["Round","XYZ","SI2","Gd","Gd","Gd","None","NCERT","0.4","5500","-50","","",""],["EM","D","IF","Excellent","Ex","Ex","Non","IGI","1.25","15000","30","","",""],["TRI","F YELLO","LOUPE-CLEAN","P","POOR","POOR","SL","NONE","1.80","8500","-32","","",""],["HE","MIX","SI1","FAIR","F","F","ST-YL","HRD","0.6","5800","-31","","",""]]),o.columns.getItemAt(5).getRange().numberFormat=[["â‚¬#,##0.00"]],o.getRange().format.autofitColumns(),o.getRange().format.autofitRows(),await e.sync(),console.log(`Table "${r}" created successfully on sheet "${t.name}"`)}))}async function showCenterDialog(){try{await Excel.run((async e=>{Office.context.ui.displayDialogAsync("https://localhost:3001/dialog.html",{height:50,width:40,promptBeforeOpen:!1,displayInIframe:!0},(e=>{if(e.status===Office.AsyncResultStatus.Failed)console.error(e.error.message);else{const t=e.value;t.addEventHandler(Office.EventType.DialogMessageReceived,(e=>{console.log("Message received: "+e.message),t.close()})),t.addEventHandler(Office.EventType.DialogEventReceived,(e=>{console.log("Dialog closed: "+e.error)}))}}))}))}catch(e){console.error("Error showing dialog:",e)}}window.PutFormula=PutFormula,document.getElementById("openCenterDialogBtn").addEventListener("click",(()=>{showCenterDialog()}));