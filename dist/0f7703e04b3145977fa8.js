async function PutAverage(){try{await Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet(),a=t.getUsedRange();a.load("rowCount, columnCount, values"),await e.sync();const r=a.rowCount,i=r+2,o={WGT:["Weight","TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."],RATE:["Rate","BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"],DISC:["Disc","%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"]},c={VALUE:["value","rapvalue","rapaport value","r.value","val","RapVlu"],NET_RATE:["Net_Rate","$ / Carat","$/Carat","$/CT","$/CTS","$/PC","Asking Price","askprice","BACK P/Ct","Base Rate","Cash Price","CashPrice","CRate","Ct/Price","D.RAP PRICE","DIS / CT","Final Rate","List$/Ct","Net Rate","NET_RATE","P.CARAT","P/CT","P/CTS","Per Crt $","Per ct","Per Ct $","PerCarat","PerCrt","PerCts","PPC","PPC$","Pr/Ct","PRAP($)","PRI/CRT","Price p.c","Price $/cts","Price / Crts","Price Per Carat","Price Per Crt","Price Per Ct","Price/Carat","Price/Crt","Price/Ct","Price/Ct ($)","Price/ct.","Price/Cts","Price/CTS $","Price/Cts USD","Price/Cts.","PRICE_DOLLAR","PRICE_PER_CARAT","Price_Per_Crt","PricePerCarat","Rap @","rap_prc","RapNet Price","RapNet Rate","RATE","Rate $/CT","Rate / CT","Rate ?","Rate per carat as per Rapnet","Rate($)","RATE($/CT)","Rate/Ct","RP Price","RTE","SaleRate","sales_price","Selling Price","User Price /Cts","VALLUE","WebsiteRate"],NET_VALUE:["net_value","Net_Value","$ Total","amont","AMOUNT","Amount $","Amount ?","Amount US$","Amount($)","Amt","Amt $","Amt.","askamount","Asking Amount","Back Total","Base Amt","CAmount","DiscountPrice","EST AMT","F value","F.Amt","FINAL","Final Amount","Final Amt","Final Amt IN $","Final Price","Final Value","FINAL$","final_amount","FinalValue","mspTotal","Net","NET VALLUE","NET $","Net Amt","Net Amt($)","Net Value","NET_VALUE","NetAmt","Offer Value($)","Rap US $","Rapa Value","RapNet Amount","RapNet Price","RP Tot$","SaleAmt","saledollorprice","Stone Price","Stone($)","T AMT","T Price","T VALUE","T. AMOUNT","T.Amt","Tot. Value","Total","TOTAL $","Total $ as per Rapnet","Total ($)","TOTAL AMOUNT","Total Amt","Total Amt.","Total Price","Total$","total_price","TotalAmount","TotalPrice","TotalValue $","User Total $","VALUE_DOLLAR","WebsiteAmount"]},s={};for(let e=0;e<a.columnCount;e++){const t=(a.values[0][e]||"").toString().trim().toLowerCase(),r=String.fromCharCode(65+e);o.WGT.some((e=>t.includes(e.toLowerCase())))?s.weight=r:o.DISC.some((e=>t.includes(e.toLowerCase())))||c.VALUE.some((e=>t.includes(e.toLowerCase())))?s.value=r:c.NET_VALUE.some((e=>t.includes(e.toLowerCase())))?s.net_value=r:o.RATE.some((e=>t.includes(e.toLowerCase())))?s.rate=r:c.NET_RATE.some((e=>t.includes(e.toLowerCase())))&&(s.net_rate=r)}for(let e=0;e<a.columnCount;e++){const R=String.fromCharCode(65+e),n=(a.values[0][e]||"").toString().trim().toLowerCase(),l=t.getRange(`${R}${i+1}`),P=o.WGT.some((e=>n.includes(e.toLowerCase()))),C=o.DISC.some((e=>n.includes(e.toLowerCase()))),p=c.VALUE.some((e=>n.includes(e.toLowerCase()))),A=c.NET_VALUE.some((e=>n.includes(e.toLowerCase()))),T=o.RATE.some((e=>n.includes(e.toLowerCase()))),u=c.NET_RATE.some((e=>n.includes(e.toLowerCase())));P||p||A?(l.formulas=[[`=SUM(${R}2:${R}${r})`]],l.format.fill.color="yellow"):C?(l.formulas=[[`=AVERAGE(${R}2:${R}${r})`]],l.format.fill.color="yellow"):T&&s.value&&s.weight?(l.formulas=[[`=${s.value}${i+1}/${s.weight}${i+1}`]],l.format.fill.color="yellow"):u&&s.net_value&&s.weight&&(l.formulas=[[`=${s.net_value}${i+1}/${s.weight}${i+1}`]],l.format.fill.color="yellow")}await e.sync(),showToastNotification("Averages calculated successfully!")}))}catch(e){console.error("Error:",e),showToastNotification("Failed to calculate averages","error")}}function detectColumnType(e){const t=e.toLowerCase(),a={WGT:["Weight","TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."],RATE:["Rate","BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"],DISC:["Disc","%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"]},r={VALUE:["value","rapvalue","rapaport value","r.value","val","RapVlu"],NET_RATE:["Net_Rate","$ / Carat","$/Carat","$/CT","$/CTS","$/PC","Asking Price","askprice","BACK P/Ct","Base Rate","Cash Price","CashPrice","CRate","Ct/Price","D.RAP PRICE","DIS / CT","Final Rate","List$/Ct","Net Rate","NET_RATE","P.CARAT","P/CT","P/CTS","Per Crt $","Per ct","Per Ct $","PerCarat","PerCrt","PerCts","PPC","PPC$","Pr/Ct","PRAP($)","PRI/CRT","Price p.c","Price $/cts","Price / Crts","Price Per Carat","Price Per Crt","Price Per Ct","Price/Carat","Price/Crt","Price/Ct","Price/Ct ($)","Price/ct.","Price/Cts","Price/CTS $","Price/Cts USD","Price/Cts.","PRICE_DOLLAR","PRICE_PER_CARAT","Price_Per_Crt","PricePerCarat","Rap @","rap_prc","RapNet Price","RapNet Rate","RATE","Rate $/CT","Rate / CT","Rate ?","Rate per carat as per Rapnet","Rate($)","RATE($/CT)","Rate/Ct","RP Price","RTE","SaleRate","sales_price","Selling Price","User Price /Cts","VALLUE","WebsiteRate"],NET_VALUE:["net_value","Net_Value","$ Total","amont","AMOUNT","Amount $","Amount ?","Amount US$","Amount($)","Amt","Amt $","Amt.","askamount","Asking Amount","Back Total","Base Amt","CAmount","DiscountPrice","EST AMT","F value","F.Amt","FINAL","Final Amount","Final Amt","Final Amt IN $","Final Price","Final Value","FINAL$","final_amount","FinalValue","mspTotal","Net","NET VALLUE","NET $","Net Amt","Net Amt($)","Net Value","NET_VALUE","NetAmt","Offer Value($)","Rap US $","Rapa Value","RapNet Amount","RapNet Price","RP Tot$","SaleAmt","saledollorprice","Stone Price","Stone($)","T AMT","T Price","T VALUE","T. AMOUNT","T.Amt","Tot. Value","Total","TOTAL $","Total $ as per Rapnet","Total ($)","TOTAL AMOUNT","Total Amt","Total Amt.","Total Price","Total$","total_price","TotalAmount","TotalPrice","TotalValue $","User Total $","VALUE_DOLLAR","WebsiteAmount"]};return a.WGT.some((e=>t.includes(e.toLowerCase())))?"weight":a.RATE.some((e=>t.includes(e.toLowerCase())))?"rate":a.DISC.some((e=>t.includes(e.toLowerCase())))?"disc":r.VALUE.some((e=>t.includes(e.toLowerCase())))?"value":r.NET_RATE.some((e=>t.includes(e.toLowerCase())))?"net_rate":r.NET_VALUE.some((e=>t.includes(e.toLowerCase())))?"net_value":"other"}async function isNumericColumn(e,t){const a=e.getRangeByIndexes(1,t,5,1);return a.load("values"),await a.context.sync(),a.values.some((e=>!isNaN(parseFloat(e[0]))))}async function PutFormula(){console.log("Applying formulas..."),await Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet().getUsedRange();t.load("values"),await e.sync();let a=t.values;if(0===a.length||0===a[0].length)return void console.error("No data found.");let r=-1;for(let e=0;e<a.length;e++)if(a[e].some((e=>"string"==typeof e&&""!==e.trim()))){r=e;break}if(-1===r)return void console.error("No header row found.");let i=a[r].map((e=>e?e.toString().trim().toLowerCase():""));function o(e){return i.findIndex((t=>e.some((e=>t===e.toLowerCase()))))}const c=o(["Weight","TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."]),s=o(["Rate","BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"]),R=o(["Disc","%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"]);if(-1===c||-1===s||-1===R)return void console.error("Missing required columns (Weight, Rate, or Discount).");const n=o(["value","rapvalue","rapaport value","r.value","val","RapVlu"]),l=o(["NetRate","$ / Carat","$/Carat","$/CT","$/CTS","$/PC","Asking Price","askprice","BACK P/Ct","Base Rate","Cash Price","CashPrice","CRate","Ct/Price","D.RAP PRICE","DIS / CT","Final Rate","List$/Ct","Net Rate","NET_RATE","P.CARAT","P/CT","P/CTS","Per Crt $","Per ct","Per Ct $","PerCarat","PerCrt","PerCts","PPC","PPC$","Pr/Ct","PRAP($)","PRI/CRT","Price p.c","Price $/cts","Price / Crts","Price Per Carat","Price Per Crt","Price Per Ct","Price/Carat","Price/Crt","Price/Ct","Price/Ct ($)","Price/ct.","Price/Cts","Price/CTS $","Price/Cts USD","Price/Cts.","PRICE_DOLLAR","PRICE_PER_CARAT","Price_Per_Crt","PricePerCarat","Rap @","rap_prc","RapNet Price","RapNet Rate","RATE","Rate $/CT","Rate / CT","Rate ?","Rate per carat as per Rapnet","Rate($)","RATE($/CT)","Rate/Ct","RP Price","RTE","SaleRate","sales_price","Selling Price","User Price /Cts","VALLUE","WebsiteRate"]),P=o(["Net_Value","$ Total","amont","AMOUNT","Amount $","Amount ?","Amount US$","Amount($)","Amt","Amt $","Amt.","askamount","Asking Amount","Back Total","Base Amt","CAmount","DiscountPrice","EST AMT","F value","F.Amt","FINAL","Final Amount","Final Amt","Final Amt IN $","Final Price","Final Value","FINAL$","final_amount","FinalValue","mspTotal","Net","NET VALLUE","NET $","Net Amt","Net Amt($)","Net Value","NET_VALUE","NetAmt","Offer Value($)","Rap US $","Rapa Value","RapNet Amount","RapNet Price","RP Tot$","SaleAmt","saledollorprice","Stone Price","Stone($)","T AMT","T Price","T VALUE","T. AMOUNT","T.Amt","Tot. Value","Total","TOTAL $","Total $ as per Rapnet","Total ($)","TOTAL AMOUNT","Total Amt","Total Amt.","Total Price","Total$","total_price","TotalAmount","TotalPrice","TotalValue $","User Total $","VALUE_DOLLAR","WebsiteAmount"]),C=getColumnLetter(c),p=getColumnLetter(s),A=getColumnLetter(R),T=-1!==n?getColumnLetter(n):null,u=-1!==l?getColumnLetter(l):null,D=-1!==P?getColumnLetter(P):null;for(let e=r+1;e<a.length;e++){const t=e+1;T&&(a[e][n]=`=${C}${t}*${p}${t}`),u&&(a[e][l]=`=${p}${t}+((${p}${t}*${A}${t})/100)`),u&&D&&(a[e][P]=`=${C}${t}*${u}${t}`)}t.formulas=a,await e.sync(),console.log("Formulas applied successfully!")})).catch((e=>console.error("Error:",e)))}function getColumnLetter(e){if(e<0)return"";let t="",a=e;for(;a>=0;)t=String.fromCharCode(a%26+65)+t,a=Math.floor(a/26)-1;return t}async function createTable(){await Excel.run((async e=>{const t=e.workbook.worksheets.getActiveWorksheet();t.load("name"),await e.sync();const a=(new Date).getTime(),r=`ExpensesTable_${t.name.replace(/\s+/g,"_")}_${a}`,i=t.tables.add("A1:N1",!0);i.name="ExpensesTable",i.name=r,i.getHeaderRowRange().values=[["Shp#","Color","Clarity ??","Cut","Polish","Symm","FLName","Lab","Weight","NEW RAP","Disc","NetRate","Amount $","Value"]],i.rows.add(null,[["Round","E","VVS1","Good","Good","Good","None","G.I.A","0.25","5000","-25","","",""],["Ht","E","VVS2-","Ideal","Ideal","Ideal","Non","GIA","0.98","6000","-27","","",""],["EM","D","SI1","Ex","Ex","Ex","MEDIUM","HRD","0.6","5800","-31","","",""],["Round","XYZ","SI2","Gd","Gd","Gd","None","NCERT","0.4","5500","-50","","",""],["EM","D","IF","Excellent","Ex","Ex","Non","IGI","1.25","15000","30","","",""],["TRI","F YELLO","LOUPE-CLEAN","P","POOR","POOR","SL","NONE","1.80","8500","-32","","",""],["HE","MIX","SI1","FAIR","F","F","ST-YL","HRD","0.6","5800","-31","","",""],["Princess","G","SI1","Excellent","Excellent","Excellent","STRONG","GIA","1.8","7800","8","","",""],["Oval","H","SI2","Very Good","\tVery Good","Very Good","FNT","IGI","0.95","6800","32","","",""],["Cushion","I","I1","Good","Good","Good","SLIGHT","HRD","2.1","4500","-12","","",""],["Emerald","D","VVS1","Excellent","Excellent","Excellent","None","GIA","1.1","13500","-25","","",""],["OMB","E","VS1","Very Good","Very Good","Very Good","None","IGI","1.55","10500","-17","","",""],["Radiant","G","SI1","Excellent","Excellent","Excellent","FNT","GIA","1.7","6800","8","","",""],["Marquise","G","SI1","Poor","P","PR","MED","GIA","1.1","7500","-42","","",""],["Round","H","SI2","Very Good","Very Good","Very Good","NON","IGI","1.3","6500","-28","","",""]]),i.columns.getItemAt(5).getRange().numberFormat=[["€#,##0.00"]],i.getRange().format.autofitColumns(),i.getRange().format.autofitRows(),await e.sync(),console.log(`Table "${r}" created successfully on sheet "${t.name}"`)}))}async function showCenterDialog(){try{await Excel.run((async e=>{Office.context.ui.displayDialogAsync("https://localhost:3001/dialog.html",{height:50,width:40,promptBeforeOpen:!1,displayInIframe:!0},(e=>{if(e.status===Office.AsyncResultStatus.Failed)console.error(e.error.message);else{const t=e.value;t.addEventHandler(Office.EventType.DialogMessageReceived,(e=>{console.log("Message received: "+e.message),t.close()})),t.addEventHandler(Office.EventType.DialogEventReceived,(e=>{console.log("Dialog closed: "+e.error)}))}}))}))}catch(e){console.error("Error showing dialog:",e)}}window.PutFormula=PutFormula,document.getElementById("openCenterDialogBtn").addEventListener("click",(()=>{showCenterDialog()}));