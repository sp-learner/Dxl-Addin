function closeModal(){document.getElementById("customSortModal").style.display="none",document.getElementById("modalOverlay").style.display="none"}document.getElementById("openModal").addEventListener("click",(function(){document.getElementById("customSortModal").style.display="block",document.getElementById("modalOverlay").style.display="block",loadPersistedColumns()})),document.getElementById("closeModal").addEventListener("click",closeModal),document.getElementById("modalOverlay").addEventListener("click",closeModal);const SortConfig={orders:{Shape:{ROUND:{order:1,synonyms:["BRILLIANT","RBC","BR","Round Brilliant","ROUND","RB","Round"]},CUSHION:{order:3,synonyms:["CUSHION MODIFIED","CM","S.CUSHION","SQ. CUSHION MODIFIED","LONG CUSHION","CUSHION MODIFIED BIALLIANT","CM-4","CM-4","CM-4","CMB","CU","CUSHION BRILLIANT","CUSION","CUSHION MBR","CUS","CUN","CUSHION MODIFIED BRILLIANT","CUSHION"]},HEART:{order:6,synonyms:["HE","HB","Ht","S.HEART","HT","ROSE HEART","HRT JODI","Heart-P8-P8","Heart"]},EMERALD:{order:5,synonyms:["EM","Em","E","EMERALD 4STEP","EMERALD","ASYMEMERALD4S","EM-HD","EMRALD","SQUARE EMERALD","EMR","Emerald Cut"]},PEAR:{order:9,synonyms:["PE","SGP-100","PB","Pear Brilliant","PEAR MODIFIED BRILLIANT"]},MQ:{order:7,synonyms:["M","MQ","MB","S.MARQUISE","MARQUISE","MQ"]},OVAL:{order:8,synonyms:["OB","OVAL","OV","S.OVAL","OMB","Oval Brilliant","OVL","OVAL MODIFIED BRILLIANT"]},PRINCESS:{order:10,synonyms:["SMB","BEZEL PRINCESS","PRIN","PRN","PR","PRINCES","PRI","Princess Cut","PRINCESS","PC"]},RADIAN:{order:11,synonyms:["LR","RADIANTB","RADIANT","RN","Rediant","CSMB","R","CRMB","CCRMB","RA","L-RD","SQUARE RADIANT MODIFIED","RADIANT MODIFIED BRILLIANT","RADIANT MODIFIED","LR_BRILLIANT","LONG RADIANT","SQ.RADIANT","RADIANT","SQ RADIANT"]},"SQ.EMERALD":{order:12,synonyms:["SEM","SQ.EMERALD","S.EMERALD","SQ.EM","SE","SQ-EM","SQ.EMERALD"]},BAGUETTE:{order:14,synonyms:["BT","RC","RSC","BUG","BU","BUGGETTE","BAGUETTE"]},TRIANGLE:{order:16,synonyms:["TR","TS","Triangular","TRI"]},BRIOLETTE:{order:17,synonyms:["BCM","BLT","BRIOLETTE"]},"CUS.BRILLIANT":{order:75,synonyms:["CB","CR","CUS.BRILLIANT"]},MIX:{order:94,synonyms:["MIX"]},FANCY:{order:95,synonyms:["FANCY"]}},Color:{D:{order:1,synonyms:["D","*D"]},E:{order:3,synonyms:["E"]},F:{order:4,synonyms:["F","F YELLO"]},G:{order:6,synonyms:["G","RARE WHITE G"]},H:{order:7,synonyms:["H","H-","WHITE (H)","WHITE H"]},I:{order:9,synonyms:["I"]},J:{order:10,synonyms:["J"]},K:{order:11,synonyms:["K","K, Faint Brown"]},L:{order:12,synonyms:["L","L, Faint Brown"]},M:{order:13,synonyms:["M","TINTED COLOUR M"]},N:{order:14,synonyms:["N"]},X:{order:24,synonyms:["X","XYZ"]},Z:{order:26,synonyms:["Z"]},"P-Q":{order:28,synonyms:["P-Q"]},"S-T":{order:30,synonyms:["S-T"]},MIX:{order:62,synonyms:["MIX"]},FANCY:{order:68,synonyms:["FANCY"]}},Clarity:{IF:{order:2,synonyms:["IF","LOUPE-CLEAN","LC","Internally Flawless"]},VVS1:{order:3,synonyms:["VVS1","VVS1-","vvs1","VVS 1"]},VVS2:{order:4,synonyms:["VVS2","VVS2-","vvs2","VVS 2"]},VS1:{order:5,synonyms:["VS1","VS 1"]},VS2:{order:6,synonyms:["VS1","VS 1"]},SI1:{order:7,synonyms:["SI1","SI1-","SI 1"]},SI2:{order:8,synonyms:["SI2","SI2-","SI 2"]},SI3:{order:9,synonyms:["SI3"]},I1:{order:10,synonyms:["I1"]},I2:{order:11,synonyms:["I1"]},MIX:{order:16,synonyms:["MIX"]}},Cut:{EX:{order:2,synonyms:["EXCELLENT","Excellent","EXC","IDEAL","Ideal","Ex","EX-2","EX-1","EX-3","X1","X2","X3","X4","ex1","ex2","I","Ex Ideal","EX3"]},VG:{order:3,synonyms:["VERY GOOD","V. GOOD","VG","VV","VX","V"]},GD:{order:4,synonyms:["GOOD","Good","GD","G","GV","GX","ex6","G","Gd"]},FR:{order:5,synonyms:["FAIR","F","FR","FA","F"]},PR:{order:6,synonyms:["P","POOR","PR","PU"]}},Polish:{EX:{order:2,synonyms:["EXCELLENT","Ex","EXC","IDEAL","Ideal","X1","X2","EX-2","Ex Ideal"]},VG:{order:3,synonyms:["VERY GOOD","VG","V. GOOD"]},GD:{order:4,synonyms:["GOOD","Good","GD","G","Gd"]},FR:{order:5,synonyms:["FAIR","FR","F","FA"]},PR:{order:6,synonyms:["P","POOR","PR"]}},Symm:{EX:{order:2,synonyms:["EXCELLENT","Ex","EXC","IDEAL","Ideal","X1","X2","EX-2","Ex Ideal"]},VG:{order:3,synonyms:["VERY GOOD","VG","V. GOOD"]},GD:{order:4,synonyms:["GOOD","Good","GD","G","Gd"]},FR:{order:5,synonyms:["FAIR","FR","F","FA"]},PR:{order:6,synonyms:["P","POOR","PR"]}},Fls:{NONE:{order:1,synonyms:["N","NO","NIL","FL0","NN","Non","None"]},FNT:{order:2,synonyms:["FAINT","FNT","NEGLIGIBLE","FL1","FA"]},VSL:{order:3,synonyms:["VERY SLIGHT","VSLG","VSLT","VSL","VS"]},MED:{order:4,synonyms:["M","MEDIUM","MED","FL2","MD","MB","MEDIUM BLUE","ME","MD-BL","MD-YL"]},SLT:{order:5,synonyms:["SL","SLIGHT","SLI","SLT"]},STG:{order:6,synonyms:["STRONG","STG","ST","FL3","S","STRONG BLUE","STR","STO","ST-BL","ST-WH","ST-YL"]},VST:{order:7,synonyms:["VERY STRONG","VST","FL4","VSTG","VST-BL"]}},Lab:{GIA:{order:1,synonyms:["G.I.A","GIA","GA","GIA"]},IGI:{order:2,synonyms:["IGI"]},HRD:{order:3,synonyms:["HRD"]},CGL:{order:4,synonyms:["CGL"]},AGS:{order:5,synonyms:["AGS"]},"NO-CERT":{order:6,synonyms:["NONE","NON","NC","NONCERT","NCERT","NON CERT"]}}},numericColumns:["Weight","Rate","Disc","Value","NetRate","Amount","PRC","DISCOUNT","DISC"],columnSynonyms:{Shape:["Shape Name","SHAPE#","SHAP#","Shp#","Shape Desc","Rap Shape","rapShape","Sh","Sha","SHAP","SHAP.","Shape","Shape ??","SHAPE.","Shape_Code","Shp","Shp.","Shp_Name"],Color:["Colour","Color (Long)","Color C","Col#","CL.","clours","CLR","Col","Col.","Color","Color ??","Color_Code","ColorCode","Colour","Rap Color","rapColor"],Clarity:["Cl#","Quality","clar","Cla#","CAL","Cal_Name","CL","Cl.","Cla","Cla.","Clar","Claratiy","Clari","Clarity","Clarity ??","Clarity_Code","ClarityName","CLERITY","CLR","Clr.","Clrt","CLRTY","CTY","Purity","Qua","Rap Clarity","rapClarity"],Cut:["Proportions","CUTPROP","CUT#","Prop#","Prop","Ct","CUT","Cut Grade","Cut Grade ??","CUT.","Cut_Code","Cut_Grade","CutGrade","Final Cut","Prop.","PropCode"],Polish:["POL#","PL","po","POL","POL.","Polish","Polish ??","Polish_Code","PolishName"],Symm:["Symm","SYM#","SUM","SYS","Sy","SYM","Sym.","SYMM","Symmetry","Symmetry ??","Symmetry_Code","Symmmetry","SymName"],Fls:["Flr","FLRN","FLUOR#","Flour#","FLRInt","Fluore#","Flor#","Flo#","FL","FL.","FLName","FLO","flor","FLOR.","Flore","Floro","FLORO.","Florosence","Flors","Flou","Flour","Flour.","Flourence","FLOURESCENSE","FLOURESENCE","Flr","flr_intensity","Flrcnt","FLRInt","FlrIntens","Fls","FLS.","FLU","fluo","Fluo Int","Fluo.","Fluor","Fluor.","Fluores..","Fluorescence","Fluorescence ??","Fluorescence Intensity","Fluorescence_Code","Fluorescence_Intensity","FluorescenceColor","FluorescenceIntensity","Fluorescense","Fluorescent","FLUORS","Flur","Fluro","FLURO."],Lab:["Cer","Cert","Cert By","Cert From","Cert Name","CERT.","CERTI","CERTI_NAME","CERTIFICATE","CertName","CR_Name","Crt","Lab","Lab ??","Lab Name","Lab_Code","report"],Weight:["TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."],Rate:["BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"],Disc:["%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"],Value:["value","rapvalue","rapaport value","r.value","val","RapVlu"],NetRate:["net_rate","$ / Carat","$/Carat","$/CT","$/CTS","$/PC","Asking Price","askprice","BACK P/Ct","Base Rate","Cash Price","CashPrice","CRate","Ct/Price","D.RAP PRICE","DIS / CT","Final Rate","List$/Ct","Net Rate","NET_RATE","P.CARAT","P/CT","P/CTS","Per Crt $","Per ct","Per Ct $","PerCarat","PerCrt","PerCts","PPC","PPC$","Pr/Ct","PRAP($)","PRI/CRT","Price p.c","Price $/cts","Price / Crts","Price Per Carat","Price Per Crt","Price Per Ct","Price/Carat","Price/Crt","Price/Ct","Price/Ct ($)","Price/ct.","Price/Cts","Price/CTS $","Price/Cts USD","Price/Cts.","PRICE_DOLLAR","PRICE_PER_CARAT","Price_Per_Crt","PricePerCarat","Rap @","rap_prc","RapNet Price","RapNet Rate","RATE","Rate $/CT","Rate / CT","Rate ?","Rate per carat as per Rapnet","Rate($)","RATE($/CT)","Rate/Ct","RP Price","RTE","SaleRate","sales_price","Selling Price","User Price /Cts","VALLUE","WebsiteRate"],Amount:["net_value","$ Total","amont","AMOUNT","Amount $","Amount ?","Amount US$","Amount($)","Amt","Amt $","Amt.","askamount","Asking Amount","Back Total","Base Amt","CAmount","DiscountPrice","EST AMT","F value","F.Amt","FINAL","Final Amount","Final Amt","Final Amt IN $","Final Price","Final Value","FINAL$","final_amount","FinalValue","mspTotal","Net","NET VALLUE","NET $","Net Amt","Net Amt($)","Net Value","NET_VALUE","NetAmt","Offer Value($)","Rap US $","Rapa Value","RapNet Amount","RapNet Price","RP Tot$","SaleAmt","saledollorprice","Stone Price","Stone($)","T AMT","T Price","T VALUE","T. AMOUNT","T.Amt","Tot. Value","Total","TOTAL $","Total $ as per Rapnet","Total ($)","TOTAL AMOUNT","Total Amt","Total Amt.","Total Price","Total$","total_price","TotalAmount","TotalPrice","TotalValue $","User Total $","VALUE_DOLLAR","WebsiteAmount"]},getStandardColumnName:function(e){if(!e)return null;const o=e.trim().toUpperCase();for(const[e,t]of Object.entries(this.columnSynonyms)){if(e.toUpperCase()===o)return e;if(t.some((e=>e.toUpperCase()===o)))return e}return e},getStandardValueInfo:function(e,o){const t=this.getStandardColumnName(o);if(!t||!this.orders[t])return null;const n=String(e).trim().toUpperCase(),r=this.orders[t];for(const[e,o]of Object.entries(r))if(e.toUpperCase()===n)return{standardValue:e,order:o.order};for(const[e,o]of Object.entries(r))if(o.synonyms.some((e=>e.toUpperCase()===n)))return{standardValue:e,order:o.order};return null}};let allColumns=[];function closeModal(){document.getElementById("customSortModal").style.display="none",document.getElementById("modalOverlay").style.display="none"}async function populateColumnDropdown(){document.getElementById("dropdown1").innerHTML='<option value="">Select Column</option>';try{await Excel.run((async e=>{const o=e.workbook.worksheets.getActiveWorksheet().getUsedRange();if(o.load("values"),await e.sync(),o.values&&o.values.length>0){const e=document.createElement("option");allColumns=o.values[0],e.style.color="#ff0000",refreshDropdownOptions()}}))}catch(e){console.error("Error loading columns:",e)}}function refreshDropdownOptions(){const e=document.getElementById("dropdown1"),o=[...document.getElementById("selectedColumns").rows].map((e=>e.cells[1].textContent));e.innerHTML='<option value="">Select Column</option>',allColumns.forEach((t=>{if(t){const n=document.createElement("option");n.value=t,n.textContent=t;const r=removedColumns.includes(t);n.disabled=o.includes(t)&&!r,o.includes(t)?(n.style.color="#ff0000",n.title="Already added"):r&&(n.title="Removed - can re-add"),e.appendChild(n)}}))}function createTableRow(e,o){return`\n    <td>${o+1}</td>\n    <td>${e.columnName}</td>\n    <td>\n      <select>\n        <option value="ASC"  ${"ASC"===e.sortOrder?"selected":""}>ASC</option>\n        <option value="DESC" ${"DESC"===e.sortOrder?"selected":""}>DESC</option>\n      </select>\n    </td>\n    <td class="action-buttons">\n      <div class="move-btn-group">\n        <button class="move-up-btn" onclick="moveColumnUp(this)">↑</button>\n        <button class="move-down-btn" onclick="moveColumnDown(this)">↓</button>\n      </div>\n      <button class="close-row-btn" onclick="removeColumn(this)">✕</button>\n    </td>\n  `}function moveColumnUp(e){const o=e.closest("tr"),t=o.previousElementSibling;t&&(o.parentNode.insertBefore(o,t),updateRowNumbers())}function moveColumnDown(e){const o=e.closest("tr"),t=o.nextElementSibling;t&&(o.parentNode.insertBefore(t,o),updateRowNumbers())}function updateRowNumbers(){document.querySelectorAll("#selectedColumns tr").forEach(((e,o)=>{e.cells[0].textContent=o+1}))}document.getElementById("openModal").addEventListener("click",(function(){document.getElementById("customSortModal").style.display="block",document.getElementById("modalOverlay").style.display="block",populateColumnDropdown()})),document.getElementById("closeModal").addEventListener("click",closeModal),document.getElementById("modalOverlay").addEventListener("click",closeModal),document.addEventListener("DOMContentLoaded",(()=>{loadPersistedColumns()}));let sortSettingsDialog=null;function initDialog(){if(!sortSettingsDialog){const e='\n      <div class="modal-overlay2" id="sortSettingsOverlay" style="display:none">\n        <div class="save-modal2">\n          <div class="modal-header2">\n            <h3>Sort Settings Saved</h3>\n          </div>\n          <div class="modal-body2">\n            <p id="sortSettingsMessage"></p>\n          </div>\n          <div class="modal-footer2">\n            <button class="modal-ok-btn2" onclick="hideDialog()">OK</button>\n          </div>\n        </div>\n      </div>\n    ';document.body.insertAdjacentHTML("beforeend",e),sortSettingsDialog={overlay:document.getElementById("sortSettingsOverlay"),message:document.getElementById("sortSettingsMessage")}}}function showDialog(e){sortSettingsDialog||initDialog(),sortSettingsDialog.message.textContent=e,sortSettingsDialog.overlay.style.display="flex",setTimeout((()=>sortSettingsDialog.overlay.classList.add("active")),10)}function hideDialog(){sortSettingsDialog&&(sortSettingsDialog.overlay.classList.remove("active"),setTimeout((()=>sortSettingsDialog.overlay.style.display="none"),300))}const SORT_SETTINGS_FILE="sort_settings.xml";function escapeXml(e){return e?e.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"):""}function generateSortSettingsXml(e){let o='<?xml version="1.0" encoding="UTF-8"?>\n<SortSettings>\n';return e.forEach((e=>{o+="  <Column>\n",o+=`    <Name>${escapeXml(e.columnName)}</Name>\n`,o+=`    <Order>${escapeXml(e.sortOrder)}</Order>\n`,o+="  </Column>\n"})),o+="</SortSettings>",o}function parseXmlToColumns(e){try{const o=(new DOMParser).parseFromString(e,"text/xml"),t=[];return o.querySelectorAll("Column").forEach((e=>{t.push({columnName:e.querySelector("Name").textContent,sortOrder:e.querySelector("Order").textContent})})),t}catch(e){return console.error("XML parse error:",e),[]}}async function saveToXmlFile(e){try{(await initializeDB()).transaction("SortSettings","readwrite").objectStore("SortSettings").put(e,SORT_SETTINGS_FILE)}catch(e){throw console.error("Save error:",e),e}}async function loadFromXmlFile(){try{const e=await initializeDB();return new Promise((o=>{const t=e.transaction("SortSettings","readonly").objectStore("SortSettings").get(SORT_SETTINGS_FILE);t.onsuccess=()=>{o(t.result||'<?xml version="1.0"?><SortSettings></SortSettings>')},t.onerror=()=>{o('<?xml version="1.0"?><SortSettings></SortSettings>')}}))}catch(e){return console.error("Load error:",e),'<?xml version="1.0"?><SortSettings></SortSettings>'}}function updateSortOrderNumbers(){const e=document.getElementById("selectedColumns");Array.from(e.rows).forEach(((e,o)=>{e.cells[0].textContent=o+1}))}async function saveSortSettingsPermanently(){try{const e=document.getElementById("selectedColumns"),o=Array.from(e.rows).map((e=>({columnName:e.cells[1].textContent.trim(),sortOrder:e.cells[2].querySelector("select").value}))),t=generateSortSettingsXml(o);await saveToXmlFile(t),removedColumns=[],refreshDropdownOptions(),showDialog(`${o.length} column${1!==o.length?"s":""} saved successfully.`)}catch(e){showDialog("Failed to save sort settings"),console.error("Save error:",e)}}async function loadPersistedColumns(){try{const e=parseXmlToColumns(await loadFromXmlFile()),o=document.getElementById("selectedColumns");if(!o)return void console.error("Table body not found");o.innerHTML="",e.forEach(((e,t)=>{o.insertRow().innerHTML=createTableRow(e,t)}))}catch(e){console.error("Load error:",e),showDialog("Error loading saved columns")}}Office.onReady((()=>initDialog()));let removedColumns=[];async function removeColumn(e){try{const o=e.closest("tr");if(!o)return;const t=o.cells[1]?.textContent?.trim();if(!t)return;removedColumns.push(t);const n=parseXmlToColumns(await loadFromXmlFile()).filter((e=>e.columnName!==t));await saveToXmlFile(generateSortSettingsXml(n)),o.remove(),updateRowNumbers(),"function"==typeof refreshDropdownOptions&&refreshDropdownOptions()}catch(e){console.error("Column removal error:",e),showDialog("Error removing column")}}let sortColumns=[];function addColumn(){const e=document.getElementById("dropdown1").value;if(!e)return;const o=document.getElementById("selectedColumns");removedColumns=removedColumns.filter((o=>o!==e)),Array.from(o.rows).map((e=>e.cells[1].textContent.trim())).includes(e)?console.log("Column already added!","warning"):(o.insertRow().innerHTML=`\n    <td>${o.rows.length}</td>\n    <td>${e}</td>\n    <td>\n      <select>\n        <option value="ASC">ASC</option>\n        <option value="DESC">DESC</option>\n      </select>\n    </td>\n    <td class="action-buttons"> \n      <div class="move-btn-group">\n        <button class="move-up-btn" onclick="moveColumnUp(this)">↑</button>\n        <button class="move-down-btn" onclick="moveColumnDown(this)">↓</button>\n      </div>\n      <button class="close-row-btn" onclick="removeColumn(this)">✕</button>\n    </td>\n  `,updateRowNumbers())}async function applySorting(){try{await Excel.run((async e=>{const o=e.workbook.worksheets.getActiveWorksheet(),t=o.getUsedRange();if(t.load(["values","address"]),await e.sync(),!t.values||t.values.length<2)return void alert("No data to sort!");if(0===JSON.parse(localStorage.getItem("customSortColumns")||"[]").length)return void alert("No saved sort columns found!");sortColumns.forEach((e=>{t.sort.apply([{key:e.column,ascending:"ASC"===e.order}],!0)})),loadPersistedColumns();const n=t.values[0],r=multiColumnSort(t.values.slice(1),n,getCurrentSortSettings());o.getRangeByIndexes(1,0,r.length,r[0].length).values=r,await e.sync(),alert("Data re-sorted successfully with current settings!"),closeModal()}))}catch(e){console.error("Sorting failed:",e),alert("Sorting failed. See console for details.")}}function getCurrentSortSettings(){const e=[],o=document.getElementById("selectedColumns");return Array.from(o.rows).forEach((o=>{e.push({columnName:o.cells[1].textContent,sortOrder:o.cells[2].querySelector("select").value})})),e}function multiColumnSort(e,o,t){return[...e].sort(((e,n)=>{for(const r of t){const{columnName:t,sortOrder:s}=r,a=o.findIndex((e=>e===t));if(-1===a)continue;const l=e[a],i=n[a];if(!l&&!i)continue;const c=compareValues(l,i,t);if(0!==c)return"ASC"===s?c:-c}return 0}))}function compareValues(e,o,t){if(!e)return 1;if(!o)return-1;const n=SortConfig.getStandardColumnName(t);if(SortConfig.numericColumns.includes(n)||SortConfig.numericColumns.some((e=>SortConfig.columnSynonyms[e]?.includes(n))))return(parseFloat(e)||0)-(parseFloat(o)||0);const r=SortConfig.getStandardValueInfo(e,n),s=SortConfig.getStandardValueInfo(o,n);return(r?r.order:9999)-(s?s.order:9999)}async function initializeDB(){return new Promise(((e,o)=>{const t=indexedDB.open("ExcelSortSettingsDB",1);t.onupgradeneeded=e=>{const o=e.target.result;o.objectStoreNames.contains("SortSettings")||o.createObjectStore("SortSettings")},t.onsuccess=o=>{e(o.target.result)},t.onerror=e=>{console.error("IndexedDB error:",e.target.error),o(e.target.error)}}))}