function handleNetCalculations(){console.log("Calculating Values, NetRate, and NetValue..."),Excel.run((async e=>{const a=e.workbook.worksheets.getActiveWorksheet(),t=a.getUsedRange();t.load("rowCount, columnCount, values"),await e.sync();const o=t.rowCount;for(let e=1;e<o;e++){const t=a.getCell(e,3),o=a.getCell(e,4),r=a.getCell(e,5);t.formulas=[[`=A${e+1}*B${e+1}`]],o.formulas=[[`=B${e+1}+(B${e+1}*C${e+1}/100)`]],r.formulas=[[`=A${e+1}*E${e+1}`]]}const r=o,i=o+1;a.getRange(`A${r+1}:F${r+1}`).values=[["","","","","",""]],a.getCell(i,0).formulas=[[`=SUM(A2:A${o})`]],a.getCell(i,3).formulas=[[`=SUM(D2:D${o})`]],a.getCell(i,5).formulas=[[`=SUM(F2:F${o})`]],a.getCell(i,1).formulas=[[`=D${i+1}/A${i+1}`]],a.getCell(i,4).formulas=[[`=F${i+1}/A${i+1}`]],a.getRange(`A${i+1}:F${i+1}`).format.fill.color="yellow",await e.sync(),console.log("All calculations, spacing, and styling applied successfully.")})).catch((e=>{console.error("Error in handleNetCalculations: ",e)}))}async function PutFormula(){console.log("Applying fully dynamic formulas..."),await Excel.run((async e=>{const a=e.workbook.worksheets.getActiveWorksheet().getUsedRange();a.load("values"),await e.sync();let t=a.values;if(0===t.length||0===t[0].length)return void console.error("No data found in the sheet.");let o=-1;for(let e=0;e<t.length;e++)if(t[e].some((e=>"string"==typeof e&&""!==e.trim()))){o=e;break}if(-1===o)return void console.error("No valid header row found.");let r=t[o].map((e=>e?e.toString().trim().toLowerCase():""));function i(e){return r.findIndex((a=>e.some((e=>a.includes(e.toLowerCase())))))}const s=i(["TOTAL CTS","TotalCts","Weight R","weigh","Cts#","SIZE#","Wt#","Car","Cara","Carat","CARATS","Crt","Crts","CRTWT","CT","Ct.","Cts","Cts.","POLISE","CT","Size","SIZE.","Weight","Weight ??","Wgt","WHT.","WT","Wt."]),n=i(["BaseRate","Disc Price"," Full Rap Price","List","List Price","List Price ????","List Rate","LiveRAP","NEW RAP","Orap","price","R.PRICE","Rap","Rap $","Rap $/CT","Rap List","Rap Price","Rap Price($)","Rap Rate","RAP RTE","Rap$","RAP($)","Rap-Price","RAP.","Rap.","Price","Rap.($)","Rap/Price","Rap_per_Crt","RAP_PRICE","Rapa","Rapa Rate","Rapa_Rate","rapaport","RAPAPORT_RATE","RapaportPrice","RapaRate","RapDown","Rape","RapList","RapNet Price","rapnetcaratprice","RapNetPrice","RAPO","RAPPLIST","rapprice","RapRat","RapRate","RapRice","RapRte","Rate","repRate"]),l=i(["%"," % Back"," % BELOW","%Rap","Asking Disc. %","Back","BACK %","Back (-%)","Back %","Back -%","Back%","Base Off %","Base Off%","CBack","DIC.","DIS","Dis %","Dis%","DIS.","Disc","Disc %","Disc%","Disc(%)","DISC.","Disc/Pre","DISC_PER","Disco%","DISCOUNT","Discount %","Discount % ??","Discount%","Discprct","F disc","Fair/Last Bid %","Final %","Final Disc%","final_discount","ListDisc%","Net %","New Rap%","Off %","Off%","Offer Disc.(%)","OffPer","Price","R.Dn","Rap %","RAP DIS","Rap Disc","Rap Disc %","Rap Discount","Rap%","Rap.%","RAP_DISCOUNT","rap_per","RapDis","RapDown","rapnet","Rapnet","Discount %","RapNet Back","Rapnet Discount","Rapnet Discount%","rapnetdiscount","RapnetDiscountPercent","RapOff","RP Disc","saleback","SaleDis","SaleDisc","Selling Disc","User Disc","VDisc %"," WebsiteDiscount","Rapdisc"]),c=r.indexOf("value"),R=r.indexOf("net_rate"),u=r.indexOf("net_value");if([s,n,l,c,R,u].includes(-1))return void console.error("Required columns not found.");const p=getColumnLetter(s),f=getColumnLetter(n),C=getColumnLetter(l),D=getColumnLetter(R);for(let e=o+1;e<t.length;e++){const a=e+1,o=`=${p}${a}*${f}${a}`,r=`=${f}${a}+((${f}${a}*${C}${a})/100)`,i=`=${p}${a}*${D}${a}`;t[e][c]=o,t[e][R]=r,t[e][u]=i}a.formulas=t,await e.sync(),console.log("Fully dynamic formulas applied!")})).catch((e=>console.error("Error in PutFormula:",e)))}function getColumnLetter(e){if(e<0)return"";let a="",t=e;for(;t>=0;)a=String.fromCharCode(t%26+65)+a,t=Math.floor(t/26)-1;return a}window.PutFormula=PutFormula;